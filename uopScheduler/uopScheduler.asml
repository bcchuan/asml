// AsmL for a micro-op scheduler hardware specification, written by BC Chuan, 2014-01-25

namespace UopScheduler

structure Uop
  opCode as Integer
  sReg   as Integer
  dReg   as Integer

interface SchedulerIo
  IsFull() as Boolean
  IsAvailable() as Boolean
  GetDout() as Uop
  Wr(din as Uop, ready as Boolean)
  Rd()
  WrBack(reg as Integer)

class Scheduler implements SchedulerIo
  var uopQueue as Map of Integer to Uop = {->}
  var rdyQueue as Map of Integer to Boolean = {->}
  var valQueue as Map of Integer to Boolean = {->}
  var dout     as Uop = Uop(0,0,0)
  var uopTag   as Integer = 0

  public IsFull() as Boolean
    return false

  public IsAvailable() as Boolean
    return exists v in Keys(rdyQueue)
      where rdyQueue(v) and valQueue(v)

  public GetDout() as Uop
    return dout

  [Action]
  public Wr(din as Uop, ready as Boolean)
    if not IsFull()
      uopQueue(uopTag) := din
      rdyQueue(uopTag) := ready
      valQueue(uopTag) := true
      uopTag := uopTag + 1

  [Action]
  public Rd()
    if IsAvailable()
      let tag = findEarliestReadyTag()
      valQueue(tag) := false
      dout := uopQueue(tag)

  [Action]
  public WrBack(reg as Integer)
    forall tag in Keys(uopQueue)
     if uopQueue(tag).sReg = reg and valQueue(tag) and not rdyQueue(tag)
       rdyQueue(tag) := true

  private findEarliestReadyTag() as Integer
    return the w | w in Keys(uopQueue) where
             rdyQueue(w) and valQueue(w) and
             not (exists v in Keys(uopQueue) where
                    v < w and
                    rdyQueue(v) and valQueue(v))

  DumpAllInfo()
    WriteLine("")
    forall tag in Keys(uopQueue)
      let uop = uopQueue(tag)
      let rdy = rdyQueue(tag)
      let val = valQueue(tag)
      let full = IsFull()
      let avail = IsAvailable()
      WriteLine("uop="+uop+" tag="+tag+" rdy="+rdy+" val="+val+" full="+full+" avail="+avail+"")

