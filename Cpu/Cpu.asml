// AsmL for a simple CPU, written by BC Chuan, 2014-01-30

namespace Cpu

type Addr = Integer
type Value = Integer or Instruction

structure Instruction
  case Add
    rd as Integer
    ra as Integer
    rb as Integer
  case Ld
    rd as Integer
    ri as Integer
    off as Integer
  case St
    rs as Integer
    ri as Integer
    off as Integer
  case Bz
    rc as Integer
    off as Integer

interface MemIo
  lookup(a as Addr) as Value
  write(a as Addr, v as Value)

class Mem implements MemIo
  private var memory as Map of Addr to Value = {->}
  public lookup(a as Addr) as Value
    return memory(a) 
  public write(a as Addr, v as Value)
    memory(a) := v

interface CpuCoreIo
  imemLookup(a as Addr) as Value
  dmemLookup(a as Addr) as Value
  regfLookup(a as Addr) as Value
  imemWrite(a as Addr, v as Value)
  dmemWrite(a as Addr, v as Value)
  regfWrite(a as Addr, v as Value)

class CpuCore implements CpuCoreIo
  private var imem = new Mem()
  private var dmem = new Mem()
  private var regf = new Mem()
  private var pc as Addr = 0

  public imemLookup(a as Addr) as Value
    return imem.lookup(a) 
  public dmemLookup(a as Addr) as Value
    return dmem.lookup(a) 
  public regfLookup(a as Addr) as Value
    return regf.lookup(a) 

  public imemWrite(a as Addr, v as Value)
    imem.write(a, v)
  public dmemWrite(a as Addr, v as Value)
    dmem.write(a, v)
  public regfWrite(a as Addr, v as Value)
    regf.write(a, v)

  Run()
    let inst = imemLookup(pc) as Instruction
    match inst
      Add(rd, ra, rb) :
        WriteLine("Add rd="+rd+" ra="+ra+" rb="+rb+"")
        regfWrite(rd, regfLookup(ra) as Integer + regfLookup(rb) as Integer)
        pc := pc + 1
      Ld(rd, ri, off) :
        WriteLine("Ld  rd="+rd+" ri="+ri+" off="+off+"")
        regfWrite(rd, dmemLookup(regfLookup(ri) as Integer + off) as Integer)
        pc := pc + 1
      St(rs, ri, off) :
        WriteLine("St  rs="+rs+" ri="+ri+" off="+off+"")
        dmemWrite(regfLookup(ri) as Integer + off, regfLookup(rs) as Integer)
        pc := pc + 1
      Bz(rc, off) :   
        WriteLine("Bz  rc="+rc+" off="+off+"")
        if (regfLookup(rc) as Integer = 0) 
           pc := pc + off
        else
           pc := pc + 1

Main()
  step c = new CpuCore()
  step c.imemWrite(0, Add(0,0,0))
  step c.imemWrite(1, Ld(1,1,1))
  step c.imemWrite(2, St(2,2,2))
  step c.imemWrite(3, Bz(3,3))
  step c.dmemWrite(0, 0)
  step c.dmemWrite(1, 0)
  step c.dmemWrite(2, 0)
  step c.dmemWrite(3, 0)
  step c.regfWrite(0, 0)
  step c.regfWrite(1, 0)
  step c.regfWrite(2, 0)
  step c.regfWrite(3, 0)
  step c.Run()
  step c.Run()
  step c.Run()
  step c.Run()

